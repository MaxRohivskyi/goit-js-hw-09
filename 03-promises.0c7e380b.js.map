{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,qBAG3BF,KAAEM,EAAIH,MAAEI,EAAKH,KAAEI,EAAIH,OAAEI,GAAWV,EA0BtC,SAASW,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,EAAUR,MAAAS,IAEpBM,EAAO,C,SAAEP,EAAUR,MAAAS,MAEpBA,MAlCPN,EAAKc,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAEF,IAAIC,EAAeC,OAAOjB,EAAMkB,OAChC,MAAMC,EAAcF,OAAOhB,EAAKiB,OAC1BE,EAAgBH,OAAOf,EAAOgB,OAEpC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAeC,GAAK,EACvClB,EAAckB,EAAGL,GACdM,MAAK,EAAClB,SAAEA,EAAUR,MAAA2B,MACjBC,EAAAlC,GAASmC,OAAOC,QAAQ,uBAAqBtB,QAAiBmB,QAC5DI,QAAMC,IAAI,uBAAqBxB,QAAiBmB,WAEnDM,OAAM,EAACzB,SAAEA,EAAUR,MAAAkC,MAClBN,EAAAlC,GAASmC,OAAOM,QAAQ,sBAAoB3B,QAAiB0B,QAC3DH,QAAMC,IAAI,sBAAoBxB,QAAe0B,WAGnDd,GAAgBG","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nconst { form, delay, step, amount } = refs;\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n\n  let enteredDelay = Number(delay.value);\n  const enteredStep = Number(step.value);\n  const enteredAmount = Number(amount.value);\n\n  for (let i = 1; i <= enteredAmount; i += 1) {\n    createPromise(i, enteredDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n      });\n\n    enteredDelay += enteredStep;\n  };\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject({ position, delay });\n      };\n    }, delay);\n  });\n}"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$form","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","enteredDelay","Number","value","enteredStep","enteredAmount","i","then","delay1","$parcel$interopDefault","Notify","success","console","log","catch","delay2","failure"],"version":3,"file":"03-promises.0c7e380b.js.map"}